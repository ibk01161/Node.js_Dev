#5. 이벤트


5.1. 이벤트 연결
- 이벤트를 살펴보기 전 기존 자바스크립트에서 했던 이벤트 연결을 살펴보면
ex) <script>
	// window 객체에 load 이벤트를 연결
	window.addEventListener('load', function() {
 });
</script>

- 이때 load를 이벤트 이름 또는 이벤트 타입이라고 함
- 또한 매개변수로 입력한 함수를 이벤트 리스너 또는 이벤트 핸들러라고 함
- Node.js에서도 비슷한 방법 사용
- 자바스크립트의 addEventListener() 메소드보다 이름이 간단한 on() 메소드를 제공
- on() 메소드를 사용해 process 객체에 uncaughtException 이벤트를 연결할 수 있음

* uncaughtException 이벤트
- 예외가 발생할 때 실행되는 이벤트

5.2. 이벤트 연결 개수 제한
- Node.js는 한 이벤트에 10개가 넘는 이벤트 리스너를 연결할 경우 이를 개발자 실수로 간주
- exit 이벤트를 11개 연결을 하고 실행시키면 프로그램은 정상적으로 실행되고 종료되지만, 경고가 발생
- 하지만 실제 프로젝트를 진행할 때는 많은 리스너를 연결하는 경우가 있을 수도 있는데 이때는 setMaxListeners() 메소드 사용
- setMaxListeners() 메소드로 이벤트 리스너 연결 개수 제한을 높이면 경고가 발생하지 않음
- 만약 이벤트 리스너를 무한 개 연결하고 싶을 때는 setMaxListeners() 메소드의 매개변수로 0을 입력하면 됨

5.3. 이벤트 제거 (03_01_Event_connect.js, 03_02_Event_remove.js, 03_03_Event_once.js 참고)

* 이벤트를 제거할 때 사용하는 메소드
- removeListeners() : 특정 이벤트의 이벤트 리스너를 제거
- removeAllListeners() : 모든 이벤트 리스너를 제거
- once() : 이벤트 리스너를 한 번만 연결

- 03_02_Event_remove.js를 실행하면 2초 후 예외가 발생하고 uncaughtException 이벤트 리스너가 실행됨
- 처음에는 '예외 발생'이 출력하고 넘어가지만 두 번재 예외가 발생하면 프로그램이 종료됨 (removeListener)

5.4. 이벤트 강제 발생 (04_01_Event_connect.js, 04_02_Event_emit.js)

* 이벤트 강제 발생 메소드
- emit() : 이벤트 실행

- 04_02_Event_emit.js 에서 exit 이벤트를 강제로 호출해도 프로그램이 종료되지 않음, emit() 메소드를 사용해 이벤트를 강제로 호출하면 이벤트 리스너만 실행됨
- 프로그램을 종료할 때에는 process 객체의 exit() 메소드를 사용 (04_03_Event_exit.js 참고)


5.5. 이벤트 생성
- Node.js 에서 이벤트를 연결할 수 있는 모든 객체는 EventEmitter 객체의 상속을 받음 (process 객체도 EventEmitter 객체의 상속을 받기 때문에 이벤트를 연결할 수 있음)
- EventEmitter 객체는 events 모듈 안에 있는 생성자 함수로 생성할 수 있는 객체

* EventEmitter 객체의 메소드
- addListener() : 이벤트 연결
- on() : 이벤트 연결
- setMaxListeners() : 이벤트 연결 개수 조절
- removeListener() : 특정 이벤트의 이벤트 리스너를 제거
- removeAllListeners() : 모든 이벤트 리스너를 제거
- once() : 이벤트를 한 번만 연결

- 일반적으로 이벤트를 생성하는 부분과 연결하는 부분을 모듈로 분리해 사용
- 예제로 app.js (프로그램 본체), rint.js (이벤트 생성할 모듈 파일) 생성
- app.js 파일을 실행하면 rint.js 파일에서 setInterval() 함수를 실행해 이벤트를 강제 발생시키므로 app.js 파일에서 연결한 이벤트 리스너를 실행하는 것
















