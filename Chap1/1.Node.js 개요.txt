#1. Node.js 개요

1.1. Node.js 배경사
- 자바스크립트는 1994년 넷스케이프사의 브랜든 아이히가 만든 프로그래밍 언어
- 자바스크립트 덕에 사용자는 웹 페이지를 이용해 더 많은 경험을 할 수 있었고, 더 많은 콘텐츠를 제공할 수 있게 되자 많은 곳에 자바스크립트를 활용하기 시작
- 자바스크립트의 활용도가 높아지자 웹 브라우저를 벗어나 자바스크립트를 사용하려는 움직임이 시작됨 (데스크톱에서는 Adobe AIR, 윈도우 8 애플리케이션 등장, 스마트폰에서는 하이브리드 애플리케이션 등장)
- Node.js는 서버 환경에서 작동하는 자바스크립트
- 초기에는 서버 환경에서 자바스크립트를 사용하고자 Live Wire나 Jaxer 등을 사용, 가장 큰 단점으로 '속도'가 발목을 잡음, 속도가 빨라져야 서버 개발 환경에서 활용할 수 있음
- 2008년 9월 구글은 크롬 웹 브라우저의 베타 버전을 발표함으로서 자바스크립트의 속도 혁명이 시작됨
- 여기에 탑재된 V8 자바스크립트 엔진은 C++로 개발되었으며 자바스크립트 코드를 기반으로 머신 코드를 생성해 실행하므로 어떠한 자바스크립트 엔진보다 속도가 빨랐음
- 또한, 크롬 웹 브라우저의 코드를 오픈 소스화하면서 V8 자바스크립트 엔진의 코드가 공개되었다는 것도 굉장히 매력적인 상황으로 다가오게 됨
- CommonJS 표준 발표 이후 곧바로 라이언 달은 CommonJS 표준과 V8 자바스크립트 엔진을 기반으로 Node.js 를 개발
- Node.js는 서버 환경에서 자바스크립트를 사용하고자 노력했던 결과물로, 대규모 네트워크 애플리케이션을 개발할 수 있음
- 기존 웹 서버는 대부분 스레드를 기반으로 하는 동기 방식으로 네트워크 입출력을 처리
- Node.js는 이벤트를 기반으로 하는 비동기 방식으로 네트워크 입출력을 처리 (대규모 네트워크 애플리케이션 개발에 적합)


1.2. 이벤트 기반 비동기 방식
- 기존 네트워크 애플리케이션이 사용하는 '스레드 기반 동기 방식'은 작업 요청이 들어올 때마다 스레드를 여러 개 만들어 동시에 일을 처리
- 일이 많아질수록 스레드를 더 많이 만들어야 하므로 메모리 사용량이 계속 증가한다는 단점
- Node.js가 사용하는 '이벤트 기반 비동기 방식'은 스레드를 단 하나만 생성, 이벤트를 사용하므로 빠른 속도로 일을 처리할 수 있음
- 일이 많아도 몸은 하나이므로 메모리 사용량과 같은 시스템 리소스 사용량에는 변화가 거의 없음 (대규모 네트워크 프로그램을 개발하기 적합한 형태, 일을 처리하는 한명이 쓰러지면 프로그램 전체가 문제 발생)


1.3. Node.js의 장단점
- 가장 큰 장점은 이벤트 기반 비동기 방식을 사용하므로 대규모 네트워크 애플리케이션을 개발하기 적합
- 단점으로는 애플리케이션 실행에 문제가 발생하는 순간 애플리케이션 전체가 영향을 받음

* 장점
- 자바스크립트 사용 : PHP, JSP, ASP, Rails 개발자 등 어떠한 웹 개발자도 자바스크립트를 알고 있어 쉽게 접근할 수 있음
- 구글이 만드는 자바스크립트 엔진을 사용 : 여러 웹 브라우저가 경쟁하며 자바스크립트 엔진 속도를 발전시키고 있음
				      구글은 이에 대응하며 V8자바스크립트 엔진 속도가 점점 빨라지게 하고 있음
- C++ 로 개발된 V8 자바스크립트 엔진으로 개발되었으므로 C++을 사용해 기능 확장 가능

* 단점
- V8 자바스크립트 엔진이 아무리 빨라도 C나 C++로 개발된 서버 애플리케이션보다는 느림


1.4. Node.js의 활용
- '이베이'와 '링크드인'에서 사용, 현재 이베이는 Node.js를 사용해 웹 API를 배포, 링크드인은 자사의 모든 서버를 Node.js를 사용해 구성
- 웹 개발이 아닌 GitHub에서 제공하는 Atom 에디터





