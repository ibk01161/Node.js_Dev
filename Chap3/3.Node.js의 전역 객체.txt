#3. Node.js의 전역 객체


3.1. 전역 변수
- 웹 브라우저에서 동작하는 자바스크립트의 최상위 객체는 window 객체인데, window 객체는 웹 브라우저 자체와 관련된 속성과 메소드를 갖고 있음
- 하지만 Node.js는 웹 브라우저에서 동작하는 것이 아니므로 window 객체가 존재하지 않음, 대신 전역 변수와 전역 함수를 갖고있음

* 문자열 자료형의 전역 변수
- __filename : 현재 실행 중인 코드의 파일 경로를 나타냄
- __dirname : 현재 실행 중인 코드의 폴더 경로를 나타냄

* 다른 전역 변수
- console : 콘솔 화면과 관련된 기능을 다루는 객체
- exports : 모듈과 관련된 기능을 다루는 객체
- process : 프로그램과 관련된 기능을 다루는 객체

3.2. console 객체
- console 객체는 지금까지 console.log() 메소드를 사용해봤으므로 친숙하고, Node.js 콘솔 화면과 관련된 기능을 다룸

* console 객체의 메소드
- log() : 출력, 특수문자를 이용해 문자열 출력 가능, %d - 숫자, %s - 문자열, %j - JSON
- time() : 시간 측정 시작
- timeEnd() : 시간 측정 종료

3.3. process 객체
- 프로그램과 관련된 정보를 나타내는 객체, 웹 브라우저에서 작동하는 자바스크립트에 존재하지 않는 Node.js만이 가진 객체

* process 객체의 속성
- argv : 실행 매개변수를 나타냄
- env : 컴퓨터 환경과 관련된 정보를 나타냄
- version : Node.js의 버전을 나타냄
- versions : Node.js와 종속된 프로그램 버전을 나타냄
- arch : 프로세서의 아키텍처를 나타냄
- platform : 플랫폼을 나타냄

* process 객체의 메소드
- exit([exitCode = 0]) : 프로그램 종료
- memoryUsage() : 메모리 사용 정보 객체를 리턴
- uptime() : 현재 프로그램이 실행된 시간을 리턴
-- []괄호 안에 매개변수 생략 가능

** exit 코드
- process.exit() 메소드는 매개변수로 숫자를 하나 입력할 수 있음, 이 숫자를 exit 코드라고 부름
- exit 코드는 프로그램이 종료될 때 어떤 상태로 종료되었는지를 나타내는 숫자
- 어떠한 exit 코드를 사용하든 프로그램을 실행하는 데는 별다른 차이가 없지만, exit 코드가 0이면 프로그램이 정상적으로 종료되었음을 의미하고, exit 코드가 1이면 프로그램이 비정상적으로 종료되었다고 의미