#7. 외부 모듈



- Node.js는 npm(Node Package Manager)을 기반으로 모듈을 공유, 모듈을 공유하기 굉장히 쉬운 환경이라 외부 모듈 공유가 굉장히 활성화 됨
- npm install 모듈명 : 외부 모듈 설치 명령어
- 설치한 모듈을 내장 모듈처럼 사용할 수 있음

7.1. ejs 모듈
- npm install ejs 명령어로 외부 모듈을 다운로드하고 설치
- ejs 모듈은 템플릿 엔진 모듈로 특정 형식의 문자열을 HTML 형식의 문자열로 변환

7.1.1. ejs 모듈의 메소드
- ejs 페이지를 HTML 페이지로 바꾸어 제공하는 서버 만들기
- http모듈을 사용해 서버를 생성하고, File System 모듈을 사용해 ejsPage.ejs 파일을 읽음
- 서버를 생성한 후 ejs 페이지를 HTML 페이지로 변환해 클라이언트에 제공해야 함
- ejs 페이지를 HTML 페이지로 변환할 때는 ejs 모듈의 render() 메소드 사용
- ejs파일을 읽을 때 꼭 UTF-8로 파일 인코딩을 지정해서 읽어야 함

7.1.2. ejs 기본 형식
- ejs 코드를 보면 HTML 페이지와 비슷하지만, 특수한 태그와 그 안에 자바스크립트 코드가 들어있음

* ejs 파일의 특수 태그
- <% Code %> : 자바스크립트 코드 입력
- <%= Value %> : 데이터 출력

- 2가지 특수 태그는 render() 메소드를 사용해 ejs 페이지를 적절한 형태의 HTML 페이지로 변환시킴
- ejs 파일을 입력하고 저장한 뒤 Node.js 애플리케이션을 실행하고 서버에 접속하면 웹 페이지를 출력시킴
- 이렇게 ejs 페이지 내부에서 변수를 생성해 출력할 수 있지만, 보통 Node.js 코드에서 데이터를 생성한 뒤 ejs 페이지로 전달해 출력하는 것이 일반적

7.1.3. 데이터 전달
- ejs 페이지에 데이터를 전달하려면 Node.js 코드에서 render() 메소드의 두 번째 매개변수에 전달하곶 하는 데이터를 입력

* ejs 모듈의 사용
- 동적 웹 페이지를 생성할 때 사용
- HTML 페이지 소스 코드는 한 번 생성하면 변하지 않음, 따라서 HTML 페이지를 제공하는 서버는 항상 같은 데이터를 클라이언트에 보여줌
- 하지만 템플릿 엔진을 사용하면 클라이언트에 항상 다른 페이지를 보여줄 수 있음

 7.2. jade 모듈
- 템플릿 엔진 모듈

7.2.1. jade 모듈의 메소드
- jade 페이지를 HTML 페이지로 바꾸어 제공하는 서버 만들기
- http 모듈을 사용해 서버를 생성하고 File System 모듈을 사용해 JadePage.jade 파일을 읽음
- compile(string, option) : jade 문자열을 HTML 문자열로 바꿀 수 있는 함수를 생성
- ejs 모듈의 render() 메소드와 다르게 문자열을 리턴하는 것이 아니라 함수를 리턴함

7.2.2. jade 기본 형식
- jade 페이지는 특수한 형태의 HTML 페이지 위에 특수 태그를 몇 개 추가한 것
- 특수한 형태의 HTML 페이지 : jade 기본 형식
- jade 기본 형식에서 가장 중요한 것은 들여쓰기
- 태그 안에 글자를 입력하고 싶을 때는 지정한 태그 아래에 한 단계 더 들여쓰기를 한 후 원하는 글자 입력
- 속성을 입력하고 싶을 때는 지정한 태그 뒤에 괄호를 사용, 속성을 여러 개 입력하고 싶을 때는 쉼표를 사용해 구분
- 서버를 실행시키고 요소 검사를 사용해 HTML 태그를 살펴보면 각 태그가 계층 구조를 형성한 것을 볼 수 있음
- jade 기본 형식에서 div 태그를 쉽게 생성하는 방법은 #header 태그를 입력하는 것만으로도 id 속성이  header인 div 태그를 생성할 수 있음
- article 태그를 입력하는 것마으로도 class 속성이 article인 div 태그를 생성할 수 있음

7.2.3. jade 특수 기호

* jade 파일이 특수 태그
1) - Code : 자바스크립트 코드를 입력
2) #{Value} : 데이터 출력 (내용물 중간에 데이터를 입력할 수 있음)
3) =Value : 데이터 출력 (내용 전체를 데이터로 지정)

- ejs 모듈의 render() 메소드처럼 fn 이라고 생성한 함수의 매개변수에 jade 페이지에 전달할 데이터를 입력 (name 속성과 description 속성을 jade 페이지에 전달)
- 파일을 저장하고 서버를 실행시키면 name 속성과 description 속성을 출력하고, 반복문을 사용해 태그가 동적으로 생성되는 것을 확인할 수 있음

<<<<<<< HEAD
7.3. 서버 실행 모듈
- ejs와 jade 모듈은 '지역 모듈' 로 자바스크립트 파일 내부에서 require() 함수로 추출해서 사용
- '전역 모듈'은 터미널에서 곧바로 사용할 수 있는 모듈 (설치할 때 -g 옵션 사용, npm install -g supervisor)

7.3.1. supervisor 모듈
- Node.js 개발을 하다 보면 터미널에서 실행을 종료한 후 다시 명령을 입력하는 이유는 파일 내용을 변경해도 현재 실행 중인 스크립트에는 영향을 끼치지 못하기 때문
- supervisor 모듈은 파일의 변경 사항을 자동으로 인식하고 실행을 종료시킨 후 다시 실행시켜줌

* 설치 명령어
- npm install -g supervisor

7.3.2. forever 모듈
- 기존 멀티스레드 기반의 웹서비스는 예외가 발생해도 전체 웹 서비스에 큰 영향을 주지 않음
- 하지만 Node.js 같은 단일 스레드 기반의 웹 서비스는 예외 하나로 웹 서비스 전체가 죽어버림
- 이러한 예외 상황을 대비하고자 만들어진 모듈

* 설치 명령어
- npm install -g forever

- 사용자가 기본 경로로 들어오면 정상적으로 응답하지만 다른 경로로 들어오면 오류가 발생하는 예제 구현
- 루트 경로가 아닌 곳에 접근하면 서버에서 예외가 발생해 서버가 죽음, 하지만 forever 모듈로 웹 서버를 실행 중 이라서 루트 경로로 들어가보면 웹 서버가 정상적으로 동작함
- forever list : 웹 서버 확인 명령어
- forever stop 0 : 프로세스의 번호로 서버 종료

7.4. 기본적인 npm 명령어와 save 옵션

7.4.1. npm init
- 프로젝트 생성 시 npm init 명령어 사용
- 프로젝트의 이름, 버전, 설명, 엔트리 포인트 등을 요구하지만 기본 값 입력
- 명령 실행 후 package.json 파일이 생성되어 있음
- 이러한 속성들은 이후에 npm을 통해 프로그램을 배포할 때 활용

 * package.json 파일의 기본적인 속성
- name : 이름
- version : 버전
- description : 설명
- main : 프로젝트의 메인 파일
- author : 작성자
- licence : 라이선스

7.4.2. 모듈 버전 선택과 저장
- 모듈 버전을 선택해 설치하고 싶을 때는 @ 기호를 사용
- npm install ejs@2.4.1 : 2.4.1버전을 설치
- npm init 명령으로 package.json 파일을 만들었다면, 이러한 npm install 명령을 입력할 때 다음처럼 --save 옵션을 사용할 수 있음
- --save 옵션을 사용하면 내가 프로그램을 만들 때 어떤 버전을 사용했는지 명시 가능
